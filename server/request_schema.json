{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "requestBody",
  "type": "object",
  "required": [
    "messages",
    "model"
  ],
  "properties": {
    "frequency_penalty": {
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
      "type": [
        "number",
        "null"
      ],
      "format": "float"
    },
    "logit_bias": {
      "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified as their token ID in the tokenizer) to an associated bias value from -100 to 100.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": "number",
        "format": "float"
      }
    },
    "logprobs": {
      "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "max_completion_tokens": {
      "description": "An upper bound for the number of tokens that can be generated for a completion,",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "messages": {
      "description": "A list of messages comprising the conversation so far.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "model": {
      "description": "ID of the model to use.",
      "allOf": [
        {
          "$ref": "#/definitions/model"
        }
      ]
    },
    "n": {
      "description": "How many chat completion choices to generate for each input message.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 0.0
    },
    "presence_penalty": {
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
      "type": [
        "number",
        "null"
      ],
      "format": "float"
    },
    "seed": {
      "description": "A seed to use for random number generation.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "stop": {
      "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
      "anyOf": [
        {
          "$ref": "#/definitions/stop"
        },
        {
          "type": "null"
        }
      ]
    },
    "stream": {
      "description": "If set, the server will stream the results as they come in.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "temperature": {
      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
      "type": [
        "number",
        "null"
      ],
      "format": "float"
    },
    "tools": {
      "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/tool"
      }
    },
    "top_logprobs": {
      "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32"
    },
    "top_p": {
      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
      "type": [
        "number",
        "null"
      ],
      "format": "float"
    },
    "user": {
      "description": "A unique identifier representing your end-user, which can help the system to monitor and detect abuse.",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "Message": {
      "description": "A message that is part of a conversation which is based on the role of the author of the message.",
      "oneOf": [
        {
          "description": "The role of the messages author, in this case system.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/MessageContent"
                },
                {
                  "type": "null"
                }
              ]
            },
            "name": {
              "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
              "type": [
                "string",
                "null"
              ]
            },
            "role": {
              "type": "string",
              "enum": [
                "system"
              ]
            }
          }
        },
        {
          "description": "The role of the messages author, in this case user.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/MessageContent"
                },
                {
                  "type": "null"
                }
              ]
            },
            "name": {
              "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
              "type": [
                "string",
                "null"
              ]
            },
            "role": {
              "type": "string",
              "enum": [
                "user"
              ]
            }
          }
        },
        {
          "description": "The role of the messages author, in this case assistant.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/MessageContent"
                },
                {
                  "type": "null"
                }
              ]
            },
            "name": {
              "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
              "type": [
                "string",
                "null"
              ]
            },
            "refusal": {
              "description": "The refusal message by the assistant.",
              "type": [
                "string",
                "null"
              ]
            },
            "role": {
              "type": "string",
              "enum": [
                "assistant"
              ]
            },
            "tool_calls": {
              "description": "The tool calls generated by the model, such as function calls.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/tool_call"
              }
            }
          }
        },
        {
          "description": "The role of the messages author, in this case tool.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/MessageContent"
                },
                {
                  "type": "null"
                }
              ]
            },
            "role": {
              "type": "string",
              "enum": [
                "tool"
              ]
            },
            "tool_call_id": {
              "description": "Tool call that this message is responding to.",
              "type": "string"
            }
          }
        }
      ]
    },
    "MessageContent": {
      "anyOf": [
        {
          "description": "The text contents of the message.",
          "type": "string"
        },
        {
          "description": "An array of content parts with a defined type, each can be of type text or image_url when passing in images. You can pass multiple images by adding multiple image_url content parts. Image input is only supported when using the gpt-4o model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageContentPart"
          }
        }
      ]
    },
    "MessageContentPart": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "properties": {
            "text": {
              "description": "The text content.",
              "type": "string"
            },
            "type": {
              "description": "The type of the content part.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "image_url",
            "type"
          ],
          "properties": {
            "image_url": {
              "$ref": "#/definitions/image_url"
            },
            "type": {
              "description": "The type of the content part.",
              "type": "string"
            }
          }
        }
      ]
    },
    "ToolCallFunction": {
      "type": "object",
      "required": [
        "arguments",
        "name"
      ],
      "properties": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
        },
        "name": {
          "description": "The name of the function to call.",
          "type": "string"
        }
      }
    },
    "ToolFunction": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Description of the function to call.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The name of the function to call.",
          "type": "string"
        },
        "parameters": {
          "description": "The arguments to call the function with, as generated by the model in JSON format."
        },
        "strict": {
          "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "image_url": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "detail": {
          "description": "Specifies the detail level of the image.",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "Either a URL of the image or the base64 encoded image data.",
          "type": "string"
        }
      }
    },
    "model": {
      "description": "ID of the model to use.",
      "type": "string",
      "enum": [
        "meta-llama/Meta-Llama-2-7b",
        "meta-llama/Llama-2-7b-chat-hf",
        "meta-llama/Llama-2-70b-hf",
        "meta-llama/Meta-Llama-3-8B",
        "meta-llama/Meta-Llama-3-8B-Instruct",
        "meta-llama/Meta-Llama-3-70B",
        "meta-llama/Meta-Llama-3-70B-Instruct",
        "meta-llama/Llama-3.1-8B",
        "meta-llama/Llama-3.1-8B-Instruct",
        "meta-llama/Llama-3.1-70B",
        "meta-llama/Llama-3.1-70B-Instruct",
        "meta-llama/Llama-3.1-405B",
        "meta-llama/Llama-3.1-405B-Instruct",
        "meta-llama/Llama-3.2-1B",
        "meta-llama/Llama-3.2-1B-Instruct",
        "meta-llama/Llama-3.2-3B",
        "meta-llama/Llama-3.2-3B-Instruct",
        "NousResearch/Hermes-3-Llama-3.1-8B",
        "NousResearch/Hermes-3-Llama-3.1-70B",
        "NousResearch/Hermes-3-Llama-3.1-405B"
      ]
    },
    "stop": {
      "description": "The stop condition for the chat completion.",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "tool": {
      "type": "object",
      "required": [
        "function",
        "type"
      ],
      "properties": {
        "function": {
          "description": "The function that the model called.",
          "allOf": [
            {
              "$ref": "#/definitions/ToolFunction"
            }
          ]
        },
        "type": {
          "description": "The type of the tool. Currently, only function is supported.",
          "type": "string"
        }
      }
    },
    "tool_call": {
      "type": "object",
      "required": [
        "function",
        "id",
        "type"
      ],
      "properties": {
        "function": {
          "description": "The function that the model called.",
          "allOf": [
            {
              "$ref": "#/definitions/ToolCallFunction"
            }
          ]
        },
        "id": {
          "description": "The ID of the tool call.",
          "type": "string"
        },
        "type": {
          "description": "The type of the tool. Currently, only function is supported.",
          "type": "string"
        }
      }
    }
  }
}